# syntax=docker/dockerfile:1

# Define build-time arguments
ARG NODE_VERSION=20.9.0
ARG ALPINE_VERSION=3.19.1

###############################
# Builder Stage
###############################
FROM node:${NODE_VERSION}-alpine AS builder

# Set working directory for building the app
WORKDIR /app

# Install pnpm globally
RUN npm install -g pnpm

# Copy package files first to leverage Docker caching
# (Adjust the filenames as needed, e.g. if you use pnpm-lock.yaml)
COPY package.json pnpm-lock.yaml ./

# Install dependencies
RUN pnpm install

# Copy the rest of your source code into the container
COPY . .

# Generate Prisma client and build the application
RUN pnpm dlx prisma generate && pnpm build

###############################
# Production Stage
###############################
FROM alpine:${ALPINE_VERSION}

# Copy the Node.js runtime from the builder stage.
# This brings over the Node libraries and binaries required to run your app.
COPY --from=builder /usr/lib /usr/lib
COPY --from=builder /usr/local/lib /usr/local/lib
COPY --from=builder /usr/local/include /usr/local/include
COPY --from=builder /usr/local/bin /usr/local/bin

# Set the working directory in the production container
WORKDIR /app

# Copy the built application (and any other necessary files) from the builder stage
COPY --from=builder /app .

# Expose the port your app listens on
EXPOSE 4444

# Define the command to run your application
CMD [ "pnpm", "start" ]
